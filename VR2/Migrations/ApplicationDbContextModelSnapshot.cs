// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VR2.Models;

#nullable disable

namespace VR2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VR2.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Rejected")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("VR2.Models.ModelAgentDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AgentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AgentID");

                    b.ToTable("AgentDocuments");
                });

            modelBuilder.Entity("VR2.Models.ModelAuctionBid", b =>
                {
                    b.Property<int>("BidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidID"));

                    b.Property<double>("BidAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWinningBid")
                        .HasColumnType("bit");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("BidID");

                    b.HasIndex("RequestID");

                    b.ToTable("AuctionBids");
                });

            modelBuilder.Entity("VR2.Models.ModelAuctionBidParticipant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BidID")
                        .HasColumnType("int");

                    b.Property<string>("BuyerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ContributionAmount")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("BidID");

                    b.HasIndex("BuyerID");

                    b.ToTable("AuctionBidParticipants");
                });

            modelBuilder.Entity("VR2.Models.ModelCar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RequsetSaleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfMaking")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("VR2.Models.ModelCarOwnership", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("OwnershipPercentage")
                        .HasColumnType("float");

                    b.Property<int?>("RequsetSaleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CarID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("RequsetSaleID");

                    b.ToTable("CarOwnerships");
                });

            modelBuilder.Entity("VR2.Models.ModelClick", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ClickDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("RequestID");

                    b.ToTable("Clicks");
                });

            modelBuilder.Entity("VR2.Models.ModelContactInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("lstEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lstPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("VR2.Models.ModelExternalOwner", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ContactInfoID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContactInfoID")
                        .IsUnique();

                    b.ToTable("ExternalOwners");
                });

            modelBuilder.Entity("VR2.Models.ModelFavorit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("RequestID");

                    b.ToTable("Favorits");
                });

            modelBuilder.Entity("VR2.Models.ModelFeatures", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AreTherePowerWindows")
                        .HasColumnType("bit");

                    b.Property<string>("AudioSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<bool>("IsThereAirConditioning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereBlindSpotMonitoring")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereCruiseControl")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereNavigationSystem")
                        .HasColumnType("bit");

                    b.Property<int?>("ModelCarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ModelCarID")
                        .IsUnique()
                        .HasFilter("[ModelCarID] IS NOT NULL");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("VR2.Models.ModelFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AgentDocumentID")
                        .HasColumnType("int");

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<string>("fileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AgentDocumentID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("CarID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("VR2.Models.ModelLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("VR2.Models.ModelProperties", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<bool>("Furnished")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PropertyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.Property<double>("SpaceInSquareMeter")
                        .HasColumnType("float");

                    b.Property<DateTime>("YearOfBuilt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("acres")
                        .HasColumnType("float");

                    b.Property<DateTime?>("previouslySoldDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Properties");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("VR2.Models.ModelPropertyOwnership", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("OwnershipPercentage")
                        .HasColumnType("float");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PropertyID");

                    b.ToTable("PropertyOwnerships");
                });

            modelBuilder.Entity("VR2.Models.ModelPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RequestForSaleID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestForSaleID")
                        .IsUnique();

                    b.ToTable("ModelPurchase");
                });

            modelBuilder.Entity("VR2.Models.ModelPurchaseCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerID");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseCustomers");
                });

            modelBuilder.Entity("VR2.Models.ModelRequestForSale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SaleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAskingPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("RequestForSales");
                });

            modelBuilder.Entity("VR2.Models.ModelSafetyFeatures", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AreThereAntilockBrakesSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("AreThereBrakeAssist")
                        .HasColumnType("bit");

                    b.Property<bool>("AreThereTirePressureMonitoring")
                        .HasColumnType("bit");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int?>("ModelCarID")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAirbags")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ModelCarID")
                        .IsUnique()
                        .HasFilter("[ModelCarID] IS NOT NULL");

                    b.ToTable("SafetyFeatures");
                });

            modelBuilder.Entity("VR2.Models.ModelShare", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ExternalOwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InternalOwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAvailableForResale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalOwner")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<double?>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<int?>("RequestID")
                        .HasColumnType("int");

                    b.Property<double>("SharePercentageOfWholePropert")
                        .HasColumnType("float");

                    b.Property<double>("SharePrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ExternalOwnerID");

                    b.HasIndex("InternalOwnerID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("RequestID");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("VR2.Models.ModelAgent", b =>
                {
                    b.HasBaseType("VR2.Models.AppUser");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Agents", (string)null);
                });

            modelBuilder.Entity("VR2.Models.ModelCustomer", b =>
                {
                    b.HasBaseType("VR2.Models.AppUser");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("VR2.Models.ModelApartment", b =>
                {
                    b.HasBaseType("VR2.Models.ModelProperties");

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsThereParkingSpace")
                        .HasColumnType("bit");

                    b.ToTable("Apartment", (string)null);
                });

            modelBuilder.Entity("VR2.Models.ModelHouse", b =>
                {
                    b.HasBaseType("VR2.Models.ModelProperties");

                    b.Property<bool>("Backyard")
                        .HasColumnType("bit");

                    b.Property<double?>("GardenArea")
                        .HasColumnType("float");

                    b.Property<bool>("ISThereSwimmingPool")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereGarage")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFloor")
                        .HasColumnType("int");

                    b.ToTable("House", (string)null);
                });

            modelBuilder.Entity("VR2.Models.ModelVilla", b =>
                {
                    b.HasBaseType("VR2.Models.ModelProperties");

                    b.Property<double?>("GardenArea")
                        .HasColumnType("float");

                    b.Property<bool>("ISThereSwimmingPool")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereGarage")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFloor")
                        .HasColumnType("int");

                    b.ToTable("Villas", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VR2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VR2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VR2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VR2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VR2.Models.ModelAgentDocument", b =>
                {
                    b.HasOne("VR2.Models.ModelAgent", "Agent")
                        .WithMany("lstAgentDocument")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("VR2.Models.ModelAuctionBid", b =>
                {
                    b.HasOne("VR2.Models.ModelRequestForSale", "RequestForSale")
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestForSale");
                });

            modelBuilder.Entity("VR2.Models.ModelAuctionBidParticipant", b =>
                {
                    b.HasOne("VR2.Models.ModelAuctionBid", "Bid")
                        .WithMany("lstParticipants")
                        .HasForeignKey("BidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelCustomer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bid");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("VR2.Models.ModelCarOwnership", b =>
                {
                    b.HasOne("VR2.Models.ModelCar", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelCustomer", "Customer")
                        .WithMany("lstCarOwnership")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelCar", null)
                        .WithMany("lstCarOwnership")
                        .HasForeignKey("RequsetSaleID");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VR2.Models.ModelClick", b =>
                {
                    b.HasOne("VR2.Models.ModelCustomer", "Customer")
                        .WithMany("lstClick")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelRequestForSale", "RequestForSale")
                        .WithMany("lstClick")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RequestForSale");
                });

            modelBuilder.Entity("VR2.Models.ModelExternalOwner", b =>
                {
                    b.HasOne("VR2.Models.ModelContactInfo", "ContactInfo")
                        .WithOne("ExternalOwner")
                        .HasForeignKey("VR2.Models.ModelExternalOwner", "ContactInfoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("VR2.Models.ModelFavorit", b =>
                {
                    b.HasOne("VR2.Models.ModelCustomer", "Customer")
                        .WithMany("lstFavorit")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelRequestForSale", "RequestForSale")
                        .WithMany("lstFavorit")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RequestForSale");
                });

            modelBuilder.Entity("VR2.Models.ModelFeatures", b =>
                {
                    b.HasOne("VR2.Models.ModelCar", "Car")
                        .WithOne("Features")
                        .HasForeignKey("VR2.Models.ModelFeatures", "ModelCarID");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("VR2.Models.ModelFile", b =>
                {
                    b.HasOne("VR2.Models.ModelAgentDocument", "AgentDocumen")
                        .WithMany("lstFile")
                        .HasForeignKey("AgentDocumentID");

                    b.HasOne("VR2.Models.AppUser", "AppUser")
                        .WithMany("lstPersonalImage_IdentityImage")
                        .HasForeignKey("AppUserID");

                    b.HasOne("VR2.Models.ModelCar", "Car")
                        .WithMany("lstCarImages")
                        .HasForeignKey("CarID");

                    b.HasOne("VR2.Models.ModelProperties", "Property")
                        .WithMany("lstPropertiesImage_Document")
                        .HasForeignKey("PropertyID");

                    b.Navigation("AgentDocumen");

                    b.Navigation("AppUser");

                    b.Navigation("Car");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("VR2.Models.ModelProperties", b =>
                {
                    b.HasOne("VR2.Models.ModelLocation", "Location")
                        .WithMany("lstProperties")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("VR2.Models.ModelPropertyOwnership", b =>
                {
                    b.HasOne("VR2.Models.ModelCustomer", "Seller")
                        .WithMany("lstPropertyOwnership")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelProperties", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("VR2.Models.ModelPurchase", b =>
                {
                    b.HasOne("VR2.Models.ModelRequestForSale", "RequestForSale")
                        .WithOne("Purchase")
                        .HasForeignKey("VR2.Models.ModelPurchase", "RequestForSaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestForSale");
                });

            modelBuilder.Entity("VR2.Models.ModelPurchaseCustomer", b =>
                {
                    b.HasOne("VR2.Models.ModelCustomer", "Buyer")
                        .WithMany("lstPurchaseCustomer")
                        .HasForeignKey("BuyerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelPurchase", "Purchase")
                        .WithMany("lstPurchaseCustomer")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("VR2.Models.ModelSafetyFeatures", b =>
                {
                    b.HasOne("VR2.Models.ModelCar", "Car")
                        .WithOne("SafetyFeatures")
                        .HasForeignKey("VR2.Models.ModelSafetyFeatures", "ModelCarID");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("VR2.Models.ModelShare", b =>
                {
                    b.HasOne("VR2.Models.ModelExternalOwner", "ExternalOwner")
                        .WithMany("lstShareAsSeller")
                        .HasForeignKey("ExternalOwnerID");

                    b.HasOne("VR2.Models.ModelCustomer", "InternalOwner")
                        .WithMany("lstShare")
                        .HasForeignKey("InternalOwnerID");

                    b.HasOne("VR2.Models.ModelProperties", "Property")
                        .WithMany("lstShare")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VR2.Models.ModelRequestForSale", "Request")
                        .WithMany("lstShare")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ExternalOwner");

                    b.Navigation("InternalOwner");

                    b.Navigation("Property");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("VR2.Models.ModelAgent", b =>
                {
                    b.HasOne("VR2.Models.AppUser", null)
                        .WithOne()
                        .HasForeignKey("VR2.Models.ModelAgent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VR2.Models.ModelCustomer", b =>
                {
                    b.HasOne("VR2.Models.AppUser", null)
                        .WithOne()
                        .HasForeignKey("VR2.Models.ModelCustomer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VR2.Models.ModelApartment", b =>
                {
                    b.HasOne("VR2.Models.ModelProperties", null)
                        .WithOne()
                        .HasForeignKey("VR2.Models.ModelApartment", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VR2.Models.ModelHouse", b =>
                {
                    b.HasOne("VR2.Models.ModelProperties", null)
                        .WithOne()
                        .HasForeignKey("VR2.Models.ModelHouse", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VR2.Models.ModelVilla", b =>
                {
                    b.HasOne("VR2.Models.ModelProperties", null)
                        .WithOne()
                        .HasForeignKey("VR2.Models.ModelVilla", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VR2.Models.AppUser", b =>
                {
                    b.Navigation("lstPersonalImage_IdentityImage");
                });

            modelBuilder.Entity("VR2.Models.ModelAgentDocument", b =>
                {
                    b.Navigation("lstFile");
                });

            modelBuilder.Entity("VR2.Models.ModelAuctionBid", b =>
                {
                    b.Navigation("lstParticipants");
                });

            modelBuilder.Entity("VR2.Models.ModelCar", b =>
                {
                    b.Navigation("Features")
                        .IsRequired();

                    b.Navigation("SafetyFeatures")
                        .IsRequired();

                    b.Navigation("lstCarImages");

                    b.Navigation("lstCarOwnership");
                });

            modelBuilder.Entity("VR2.Models.ModelContactInfo", b =>
                {
                    b.Navigation("ExternalOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("VR2.Models.ModelExternalOwner", b =>
                {
                    b.Navigation("lstShareAsSeller");
                });

            modelBuilder.Entity("VR2.Models.ModelLocation", b =>
                {
                    b.Navigation("lstProperties");
                });

            modelBuilder.Entity("VR2.Models.ModelProperties", b =>
                {
                    b.Navigation("lstPropertiesImage_Document");

                    b.Navigation("lstShare");
                });

            modelBuilder.Entity("VR2.Models.ModelPurchase", b =>
                {
                    b.Navigation("lstPurchaseCustomer");
                });

            modelBuilder.Entity("VR2.Models.ModelRequestForSale", b =>
                {
                    b.Navigation("Purchase");

                    b.Navigation("lstClick");

                    b.Navigation("lstFavorit");

                    b.Navigation("lstShare");
                });

            modelBuilder.Entity("VR2.Models.ModelAgent", b =>
                {
                    b.Navigation("lstAgentDocument");
                });

            modelBuilder.Entity("VR2.Models.ModelCustomer", b =>
                {
                    b.Navigation("lstCarOwnership");

                    b.Navigation("lstClick");

                    b.Navigation("lstFavorit");

                    b.Navigation("lstPropertyOwnership");

                    b.Navigation("lstPurchaseCustomer");

                    b.Navigation("lstShare");
                });
#pragma warning restore 612, 618
        }
    }
}
